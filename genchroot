#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
#  genchroot
#
#  Copyright 2019 Mark Gomersbach <mark@gomersbach.nl>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

set -e
set -o pipefail

# Source gentoo functions for output
# shellcheck disable=SC1091
. /lib/gentoo/functions.sh || return 1

# shellcheck disable=SC1091
. /etc/portage/make.conf || return 1

# Bring it all together
main() {
    local args
    export args="${*}"
    checkchroot && chrootdive
    unchroot
    exit 0
}

# Set terminal title
settitle()
{
    case ${TERM} in
        xterm*)
          # shellcheck disable=SC1117
          local title="\[\033]0;${*}\007\]"
        ;;
        *rxvt*)
          # shellcheck disable=SC1117
          local title="\[\033]0;${*}\007\]"
        ;;
    esac
    case $SHELL in
        *zsh)
          trap '<<<"\e]0;${@}\007"' DEBUG
        ;;
        *bash)
          local prompt
          prompt=$(sed -e 's/\\\[\\033\]0;.*\\007\\\]//' <<<"$PS1")
          PS1="${title}${prompt}"
        ;;
    esac
}

# Split output
debug() {
    local func=$1
    local msg=$2
    settitle "${msg}"
    if [[ "${debug}" == "true" ]]; then
        echo "${func}(): ${msg}" >&2
        esyslog "user.info" "genchroot" "${func}(): ${msg}"
    fi
}

# Return 1 after fail
die() {
    local msg=$1
    settitle "${msg}"
    eerror "${msg}"
    kill $$
    exit 1
}

# Argument defaults
chrootbase="/mnt/chrootbase"
chrootshell=$(command -v bash)
tarballtype="false"
arch="amd64"
debug="false"
help="false"
nocolor="false"
verbose="false"

# Flag handling
while getopts 'c:s:t:a:b:dhnv' flag; do
  case "${flag}" in
    c) chrootbase=${OPTARG} ;;
    s) chrootshell=${OPTARG} ;;
    t) tarballtype=${OPTARG} ;;
    a) arch=${OPTARG} ;;
    b) baseurl=${OPTARG} ;;
    d) debug="true" ;;
    h) help="true" ;;
    n) nocolor="true" ;;
    v) verbose="true" ;;
    *) eerror "Unexpected option ${flag}" ;;
  esac
done

if [[ -z ${GENTOO_MIRRORS} ]]; then
    baseurl="${GENTOO_MIRRORS%% *}"
else
    baseurl="http://distfiles.gentoo.org/"
fi
chrootlock="${chrootbase}"/.$(basename "${0}").lock
logfile="/tmp/$(basename "${0}").log"

# Help message
usage() {
    cat <<EOF
Usage:
    $0 [options]

Options:
    -c         Chroot base path
    -s         Chroot shell/executable/script
    -a         Arch (i.e. amd64)
    -t         Tarball type (i.e. minimal-nomultilib)
    -d         Output debugging messages
    -h         This
    -n         No colored output
    -v         Be verbose (show command output)
EOF
}

# Check for help
if [[ ${help} == "true" ]]; then
    usage
    exit 0
fi

# Add sudo if not root
SUDO=''
if (( EUID != 0 )); then
    SUDO='sudo'
fi

# Output router
spawn() {
    local cmd="${SUDO} ${1}"
    settitle "${cmd}"
    debug spawn "running command '${cmd}'"
    rm "${logfile}".cur 2>/dev/null
    if [[ ${verbose} == "true" ]]; then
        (eval "${cmd}" 2>&1; echo $? > /tmp/spawn_exitcode) | tee -a "${logfile}" "${logfile}".cur
    else
        (eval "${cmd}" 2>&1; echo $? > /tmp/spawn_exitcode) | tee -a "${logfile}" "${logfile}".cur >/dev/null 2>&1
    fi
    spawn_exitcode=$([[ -f /tmp/spawn_exitcode ]] && cat /tmp/spawn_exitcode)
    rm /tmp/spawn_exitcode &>/dev/null

    return "${spawn_exitcode}"
}

checkchroot() {
    ebegin "Checking chroot"
    if [[ -z ${chrootbase} ]]; then
        die "Filesystem to chroot not set"
    fi
    if [[ -z ${chrootshell} ]]; then
        die "Shell to chroot with not set"
    fi
    if [[ -d ${chrootbase} ]]; then
        einfo "Folder exists, assuming existing chroot"
    else
        spawn "mkdir ${chrootbase}" || die "Folder could not be created"
        gettarball
    fi
    eend 0
}

gettarball() {
    ebegin "Get stage3 and unpack"
    if ${tarballtype}; then
        latest=$(wget --quiet "${baseurl}"/releases/"${arch}"/autobuilds/latest-stage3-"${arch}"-"${tarballtype}".txt -O-| tail -n 1 | cut -d " " -f 1)
    else
        latest=$(wget --quiet "${baseurl}"/releases/"${arch}"/autobuilds/latest-stage3-"${arch}".txt -O-| tail -n 1 | cut -d " " -f 1)
    fi
    if [[ -z "${latest}" ]]; then
        eerror "Could not find latest tarball" && exit 1
    fi
    tarname=$(basename "${latest}")

    spawn "wget -q -nc -c --compression=none \"${baseurl}/releases/${arch}/autobuilds/${latest}\" -O \"${chrootbase}/${tarname}\"" || eerror "Could not download stage3 tarball"
    pushd "${chrootbase}" > /dev/null
    spawn "tar xpvf \"${tarname}\" --xattrs-include='*.*' --numeric-owner" || eerror "Could not extract stage3"
    spawn "rm ${tarname}" || einfo "Could not delete stage3 tarball"
    popd > /dev/null
    eend 0
}

chrootdive() {
    ebegin "Get lock, set mounts and chroot"
    exec {lock_fd}>"${chrootlock}" || die "Could not get fd"
    flock -n "$lock_fd" || die "Could not get lock on fd"
    spawn "cp --dereference /etc/resolv.conf ${chrootbase}/etc/" || ewarn "Could not copy over resolv.conf"
    if ! cut -d' ' -f 2 < /proc/mounts | grep -q "^${chrootbase}/proc$"; then
        spawn "mount --types proc /proc ${chrootbase}/proc" || die "Could not mount proc"
    fi
    if ! cut -d' ' -f 2 < /proc/mounts | grep -q "^${chrootbase}/sys$"; then
        spawn "mount --rbind /sys ${chrootbase}/sys" || die "Could not mount sys"
        spawn "mount --make-rslave ${chrootbase}/sys" || ewarn "Could not slave sys"
    fi
    if ! cut -d' ' -f 2 < /proc/mounts | grep -q "^${chrootbase}/dev$" ; then
        spawn "mount --rbind /dev ${chrootbase}/dev" || die "Could not mount dev"
        spawn "mount --make-rslave ${chrootbase}/dev" || ewarn "Could not slave dev"
    fi
    if [[ -L /dev/shm ]]; then
        spawn "rm /dev/shm"
        spawn "mkdir /dev/shm"
        spawn "mount -t tmpfs -o nosuid,nodev,noexec shm /dev/shm"
        spawn "chmod 1777 /dev/shm"
    fi
    if [[ -d ${DISTDIR} ]]; then
        spawn "mount --rbind ${DISTDIR} ${chrootbase}/usr/portage/distfiles" || ewarn "Could not bind distfiles"
    fi
    if [[ $(awk '/MemFree/ {print $2}' /proc/meminfo) -ge 16777216 ]]; then
        spawn "mkdir -p ${chrootbase}/var/tmp/portage" || einfo "Could not create tmp portage"
        spawn "mount -t tmpfs -o rw,nosuid,nodev,noatime,mode=755 tmpfs ${chrootbase}/var/tmp/portage" || einfo "Could not mount tmpfs on tmp portage"
    fi
    sed -i -e 's/#rc_sys=""/rc_sys="prefix"/g' ${chrootbase}/etc/rc.conf > /dev/null
    sed -i -e 's/#rc_controller_cgroups="YES"/rc_controller_cgroups="NO"/g' ${chrootbase}/etc/rc.conf > /dev/null
    sed -i -e 's/#rc_depend_strict="YES"/rc_depend_strict="NO"/g' ${chrootbase}/etc/rc.conf > /dev/null
    sed -i -e 's/#rc_need="openvpn"/rc_need="!net !dev !udev-mount !sysfs !checkfs !fsck !netmount !logger !clock !modules"/g' ${chrootbase}/etc/rc.conf > /dev/null
    ${SUDO} unshare -p -f --mount-proc="${chrootbase}"/proc chroot "${chrootbase}" "${chrootshell}" || ewarn "Non-zero exit code from ${chrootshell} in ${chrootbase}"
    flock -u "$lock_fd" || eerror "Could not remove lock at ${chrootlock}"
    spawn "rm ${chrootlock}"
    eend 0
}

unchroot() {
    ebegin "Remove mounts"
    spawn "umount -l ${chrootbase}/dev{/shm,/pts,}" || ewarn "Could not umount /dev"
    spawn "umount -l ${chrootbase}/sys" || ewarn "Could not umount /sys"
    spawn "umount -l ${chrootbase}/proc" || ewarn "Could not umount /proc"
    spawn "umount -l ${chrootbase}/usr/portage/distfiles" || ewarn "Could not umount /usr/portage/distfiles"
    spawn "umount -l ${chrootbase}/var/tmp/portage" || einfo "Could not umount ${chrootbase}/var/tmp/portage"
    eend 0
}

# nocolor overwrites output module
[[ "${nocolor}" == "true" ]] && unset GOOD WARN BAD HILITE BRACKET NORMAL

if [[ "$0" == "${BASH_SOURCE[*]}" ]] ; then
    main "${@}"
fi